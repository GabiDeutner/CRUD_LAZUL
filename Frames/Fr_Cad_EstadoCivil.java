
package Frames;

import BancoDado.BD_EstadoCivil;
import Objeto.Objeto_EstadoCivil;


import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import javax.swing.table.DefaultTableModel;


public class Fr_Cad_EstadoCivil extends javax.swing.JFrame {

    private String Operacao;
    private Objeto_EstadoCivil RegistroEstadoCivil = new Objeto_EstadoCivil ();
    private BD_EstadoCivil     bd_EstadoCivil      = new BD_EstadoCivil ();
    
    public Fr_Cad_EstadoCivil() {
        initComponents();
        
        try {
            CargaTabela ();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar GRID Estado Civil\n"+ex.getMessage(), "ERRO", JOptionPane.ERROR_MESSAGE);
        }
        Operacao="";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

      
   
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lb_codigo = new javax.swing.JLabel();
        lb_nome = new javax.swing.JLabel();
        lb_abr = new javax.swing.JLabel();
        tf_codigo = new javax.swing.JTextField();
        tf_nome = new javax.swing.JTextField();
        tf_abr = new javax.swing.JTextField();
        bt_limpar = new javax.swing.JButton();
        bt_incluir = new javax.swing.JButton();
        bt_excluir = new javax.swing.JButton();
        bt_alterar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_EstadoCivil = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Estado Civil");

        lb_codigo.setText("Código:");

        lb_nome.setText("Nome:");

        lb_abr.setText("Abreviatura:");

        tf_codigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_codigoActionPerformed(evt);
            }
        });

        bt_limpar.setText("Limpar");
        bt_limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_limparActionPerformed(evt);
            }
        });

        bt_incluir.setText("Incluir");
        bt_incluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_incluirActionPerformed(evt);
            }
        });

        bt_excluir.setText("Excluir");
        bt_excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_excluirActionPerformed(evt);
            }
        });

        bt_alterar.setText("Alterar");
        bt_alterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_alterarActionPerformed(evt);
            }
        });

        tb_EstadoCivil.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Código", "Nome", "Abreviatura"
            }
        ));
        tb_EstadoCivil.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_EstadoCivilMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tb_EstadoCivil);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lb_abr)
                                    .addComponent(lb_nome))
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tf_nome, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(tf_abr, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lb_codigo)
                                .addGap(43, 43, 43)
                                .addComponent(tf_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(bt_limpar)
                        .addGap(50, 50, 50)
                        .addComponent(bt_incluir)
                        .addGap(47, 47, 47)
                        .addComponent(bt_excluir)
                        .addGap(53, 53, 53)
                        .addComponent(bt_alterar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lb_codigo, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tf_codigo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tf_nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(tf_abr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lb_nome)
                        .addGap(30, 30, 30)
                        .addComponent(lb_abr)))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_limpar)
                    .addComponent(bt_incluir)
                    .addComponent(bt_excluir)
                    .addComponent(bt_alterar))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void tf_codigoActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void bt_limparActionPerformed(java.awt.event.ActionEvent evt) {                                          

        tf_codigo.setText(null);      
        tf_nome.setText(null);
        tf_abr.setText(null); 
// TODO add your handling code here:
    }                                         

    private void bt_incluirActionPerformed(java.awt.event.ActionEvent evt) {                                           
       if(Operacao.equals("Incluir")) {
           
           if(isCamposPreenchidos()) {
                
                carregaRegEstadoCivil_Inclusao ();
                
                if(isCamposValidos()) {
                    
                    try {
                        
                        if (bd_EstadoCivil.busca_abr_EstadoCivil(RegistroEstadoCivil.getAbr_EstadoCivilPaciente())==0) {
                    
                            if(bd_EstadoCivil.InserirEstadoCivil(RegistroEstadoCivil)) {
                                JOptionPane.showMessageDialog(null, "Estado Civil incluida com sucesso.","Mensagem",JOptionPane.INFORMATION_MESSAGE);                 
                            
                            } else {
                                JOptionPane.showMessageDialog(null, "Erro ao Incluir Estado Civil.","ERRO BD",JOptionPane.ERROR_MESSAGE);                 
                            }
                            
                            
                        } else {
                             JOptionPane.showMessageDialog(null, "Abreviatura Estado Civil deve ser única.","ERRO",JOptionPane.ERROR_MESSAGE);                 
                        }
                         
                        
                        
                        
                    } catch (Exception ex) {
                      JOptionPane.showMessageDialog(null, "Erro ao Incluir Estado Civil\n"+ex.getMessage(),"ERRO BD",JOptionPane.ERROR_MESSAGE);           
                    } finally {
                        Limpar();
                        Operacao="";
                        habilitaConsulta();
                         try {
                                CargaTabela ();
                         } catch (Exception ex) {
                                JOptionPane.showMessageDialog(null, "Erro ao carregar GRID Estado Civil\n"+ex.getMessage(), "ERRO", JOptionPane.ERROR_MESSAGE);
                         }
                        
                        
                    }
                    
                    
                    
                } else {
                  JOptionPane.showMessageDialog(null, "Preencha todos os campos Corretamente!\n Abreviatura com 3 caracteres. \n Nome com até 10 caracteres","ERRO",JOptionPane.ERROR_MESSAGE);    
                }
                
            } else {
                JOptionPane.showMessageDialog(null, "Preencha todos os campos","ERRO",JOptionPane.ERROR_MESSAGE);
                
            }    
            
        } else {
            Operacao="Incluir";
            habilitaEdicao();
       }
    }                                          

    private void bt_excluirActionPerformed(java.awt.event.ActionEvent evt) {                                           
        
        int cd_Estado = 0;
        int resp = JOptionPane.showConfirmDialog(null, "Confirma Exclusão?", "Excluir", JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
        
        if(resp==0){
            
            try  {
                
                cd_Estado = Integer.parseInt(tf_codigo.getText().trim());
                
                if (bd_EstadoCivil.ExcluiEstadoCivil(cd_Estado)) {
                   JOptionPane.showMessageDialog(null, "Estado Civil Excluído com Sucesso!","Mensagem",JOptionPane.INFORMATION_MESSAGE);           
                    
                } else {
                   JOptionPane.showMessageDialog(null, "Erro ao Excluir Estado Civil \n","ERRO BD",JOptionPane.ERROR_MESSAGE);                
                }
                
            } catch (Exception ex) {
               JOptionPane.showMessageDialog(null, "Erro ao Excluir Estado Civil \n"+ex.getMessage(),"ERRO BD",JOptionPane.ERROR_MESSAGE);           
                        
            } finally {
                Limpar();
                
                try {
                    CargaTabela ();
                } catch (Exception ex) {
                       JOptionPane.showMessageDialog(null, "Erro ao carregar GRID \n"+ex.getMessage(), "ERRO", JOptionPane.ERROR_MESSAGE);
                }
                
            }
            
            
            
        } else {
            Desabilita ();
        }
        
        
                


// TODO add your handling code here:
    }                                          

    private void bt_alterarActionPerformed(java.awt.event.ActionEvent evt) {                                           
       if(Operacao.equals("Altera")) {
            if(isCamposPreenchidos()) {
                
                carregaRegEstadoCivil ();
                
                if(isCamposValidos()) {
                    
                    
                     try {
                        
                        if (bd_EstadoCivil.busca_abr_EstadoCivil_altera(RegistroEstadoCivil)) {
                    
                            if(bd_EstadoCivil.AlterarEstadoCivil(RegistroEstadoCivil)) {
                                JOptionPane.showMessageDialog(null, "Estado Civil alterado com sucesso.","Mensagem",JOptionPane.INFORMATION_MESSAGE);                 
                            
                            } else {
                                JOptionPane.showMessageDialog(null, "Erro ao Alterar Estado Civil.","ERRO BD",JOptionPane.ERROR_MESSAGE);                 
                            }
                            
                            
                        } else {
                             JOptionPane.showMessageDialog(null, "Abreviatura Estado Civil deve ser única.","ERRO",JOptionPane.ERROR_MESSAGE);                 
                        }
                         
                        
                    
                    
                        
                    } catch (Exception ex) {
                      JOptionPane.showMessageDialog(null, "Erro ao Alterar Estado Civil\n"+ex.getMessage(),"ERRO BD",JOptionPane.ERROR_MESSAGE);           
                    } finally {
                        Limpar();
                        Operacao="";
                        habilitaConsulta();
                         try {
                                CargaTabela ();
                         } catch (Exception ex) {
                                JOptionPane.showMessageDialog(null, "Erro ao carregar GRID Estado Civil\n"+ex.getMessage(), "ERRO", JOptionPane.ERROR_MESSAGE);
                         }
                        
                        
                    }
                    
                    
                    
                } else {
                  JOptionPane.showMessageDialog(null, "Preencha todos os campos Corretamente!\n Abreviatura com 3 caracteres. \n Nome com até 30 caracteres","ERRO",JOptionPane.ERROR_MESSAGE);    
                }
                
            } else {
                JOptionPane.showMessageDialog(null, "Preencha todos os campos","ERRO",JOptionPane.ERROR_MESSAGE);
                
            }    
            
        } else {
            Operacao="Altera";

            habilitaEdicao();
        }


// TODO add your handling code here:
    }                                          

    private void tb_EstadoCivilMouseClicked(java.awt.event.MouseEvent evt) {                                            
    CarregaTabela_TextFileld();
        MontaTela();        
       
    }                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Fr_Cad_EstadoCivil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Fr_Cad_EstadoCivil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Fr_Cad_EstadoCivil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Fr_Cad_EstadoCivil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Fr_Cad_EstadoCivil().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton bt_alterar;
    private javax.swing.JButton bt_excluir;
    private javax.swing.JButton bt_incluir;
    private javax.swing.JButton bt_limpar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_abr;
    private javax.swing.JLabel lb_codigo;
    private javax.swing.JLabel lb_nome;
    private javax.swing.JTable tb_EstadoCivil;
    private javax.swing.JTextField tf_abr;
    private javax.swing.JTextField tf_codigo;
    private javax.swing.JTextField tf_nome;
    // End of variables declaration                   

private void Limpar() {
        tf_codigo.setText(null);      
        tf_nome.setText(null);
        tf_abr.setText(null);       
    }
    
    private  boolean isCamposPreenchidos () {
        boolean saida=false;
       
            if((!tf_nome.getText().trim().isEmpty())&&
                (!tf_abr.getText().trim().isEmpty())) {
            saida=true;
            }       
       return saida;
    }
    
    private void carregaRegEstadoCivil () {
        
        RegistroEstadoCivil.setNm_EstadoCivilPaciente(tf_nome.getText().trim());
        RegistroEstadoCivil.setAbr_EstadoCivilPaciente(tf_abr.getText().trim());
        
    }

    private void carregaRegEstadoCivil_Inclusao () {
        
        
        RegistroEstadoCivil.setNm_EstadoCivilPaciente(tf_nome.getText().trim());
        RegistroEstadoCivil.setAbr_EstadoCivilPaciente(tf_abr.getText().trim());
        
    }
    private void habilitaConsulta () {
        Limpar();
        tf_codigo.setEditable(true);
        tf_nome.setEditable(false);
        tf_abr.setEditable(false);
    }
    
    private void habilitaEdicao () {
        Limpar();
        tf_codigo.setEditable(false);
        tf_nome.setEditable(true);
        tf_abr.setEditable(true);
    }

    private void MontaTela() {
     
        tf_nome.setText(RegistroEstadoCivil.getNm_EstadoCivilPaciente());        
        tf_abr.setText(RegistroEstadoCivil.getAbr_EstadoCivilPaciente());        
        tf_codigo.setText(String.valueOf(RegistroEstadoCivil.getCd_EstadoCivilPaciente()));
        
    }

    
    public void CargaTabela () throws Exception {
        try {
            
        
            DefaultTableModel modelo = (DefaultTableModel) tb_EstadoCivil.getModel();
            modelo.setNumRows(0);  
            modelo.setRowCount(0);
           
            for(Objeto_EstadoCivil registro: bd_EstadoCivil.CarregarListaEstadoCivil()) {
                modelo.addRow( new Object [] 
                            {
                               registro.getCd_EstadoCivilPaciente(),
                               registro.getNm_EstadoCivilPaciente(),
                               registro.getAbr_EstadoCivilPaciente()
                            }
                            );
           }
           
        } catch (Exception ex)   {
            JOptionPane.showMessageDialog(null, "Erro ao carregar GRID Estado Civil\n"+ex.getMessage(), "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    
     private void CarregaTabela_TextFileld() {
        
         RegistroEstadoCivil.setCd_EstadoCivilPaciente((int) tb_EstadoCivil.getValueAt(tb_EstadoCivil.getSelectedRow(),0));
         RegistroEstadoCivil.setNm_EstadoCivilPaciente((String) tb_EstadoCivil.getValueAt(tb_EstadoCivil.getSelectedRow(),1));
         RegistroEstadoCivil.setAbr_EstadoCivilPaciente((String) tb_EstadoCivil.getValueAt(tb_EstadoCivil.getSelectedRow(),2));
         
    }   
     
     
       private void Desabilita () {
         tf_codigo.setEditable(false);      
         tf_nome.setEditable(false);
         tf_abr.setEditable(false);
      
  }

     public boolean isCamposValidos(){
         boolean saida=false;
         if ((RegistroEstadoCivil.isAbr_EstadoCivil_Valida())&&(RegistroEstadoCivil.isNm_EstadoCivil_Valida())) {
             saida=true;
         }
         return saida;
     }


}
